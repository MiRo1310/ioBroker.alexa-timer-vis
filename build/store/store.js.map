{
  "version": 3,
  "sources": ["../../src/store/store.ts"],
  "sourcesContent": ["import type AlexaTimerVis from '../main';\nimport type { Store } from '../types/types';\n\nlet store: Store;\n\nexport function useStore(): Store {\n    if (!store) {\n        store = {\n            _this: '' as unknown as AlexaTimerVis,\n            token: '',\n            valHourForZero: '',\n            valMinuteForZero: '',\n            valSecondForZero: '',\n            pathAlexaStateToListenTo: '',\n            pathAlexaSummary: '',\n            intervalMore60: 0,\n            intervalLess60: 0,\n            debounceTime: 0,\n            unitHour1: '',\n            unitHour2: '',\n            unitHour3: '',\n            unitMinute1: '',\n            unitMinute2: '',\n            unitMinute3: '',\n            unitSecond1: '',\n            unitSecond2: '',\n            unitSecond3: '',\n            timerAction: null,\n            questionAlexa: false,\n            interval: null,\n            deviceSerialNumber: null,\n            deviceName: null,\n            lastTimer: { id: '', timerSelector: '', timerSerial: '' },\n            oldAlexaTimerObject: [],\n            alexaTimerVisInstance: '',\n            getAlexaInstanceObject: () => {\n                const dataPointArray = store.pathAlexaStateToListenTo.split('.');\n                return {\n                    adapter: dataPointArray[0],\n                    instance: dataPointArray[1],\n                    channel_history: dataPointArray[2],\n                };\n            },\n            isAddTimer: () => {\n                return store.timerAction === 'SetNotificationIntent';\n            },\n            isShortenTimer: () => {\n                return store.timerAction === 'ShortenNotificationIntent';\n            },\n            isExtendTimer: () => {\n                return store.timerAction === 'ExtendNotificationIntent';\n            },\n            isDeleteTimer: () => {\n                return store.timerAction === 'RemoveNotificationIntent';\n            },\n            getAlexaTimerVisInstance: () => {\n                return store.alexaTimerVisInstance;\n            },\n        };\n    }\n    return store;\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA,IAAI;AAEG,SAAS,WAAkB;AAC9B,MAAI,CAAC,OAAO;AACR,YAAQ;AAAA,MACJ,OAAO;AAAA,MACP,OAAO;AAAA,MACP,gBAAgB;AAAA,MAChB,kBAAkB;AAAA,MAClB,kBAAkB;AAAA,MAClB,0BAA0B;AAAA,MAC1B,kBAAkB;AAAA,MAClB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,cAAc;AAAA,MACd,WAAW;AAAA,MACX,WAAW;AAAA,MACX,WAAW;AAAA,MACX,aAAa;AAAA,MACb,aAAa;AAAA,MACb,aAAa;AAAA,MACb,aAAa;AAAA,MACb,aAAa;AAAA,MACb,aAAa;AAAA,MACb,aAAa;AAAA,MACb,eAAe;AAAA,MACf,UAAU;AAAA,MACV,oBAAoB;AAAA,MACpB,YAAY;AAAA,MACZ,WAAW,EAAE,IAAI,IAAI,eAAe,IAAI,aAAa,GAAG;AAAA,MACxD,qBAAqB,CAAC;AAAA,MACtB,uBAAuB;AAAA,MACvB,wBAAwB,MAAM;AAC1B,cAAM,iBAAiB,MAAM,yBAAyB,MAAM,GAAG;AAC/D,eAAO;AAAA,UACH,SAAS,eAAe,CAAC;AAAA,UACzB,UAAU,eAAe,CAAC;AAAA,UAC1B,iBAAiB,eAAe,CAAC;AAAA,QACrC;AAAA,MACJ;AAAA,MACA,YAAY,MAAM;AACd,eAAO,MAAM,gBAAgB;AAAA,MACjC;AAAA,MACA,gBAAgB,MAAM;AAClB,eAAO,MAAM,gBAAgB;AAAA,MACjC;AAAA,MACA,eAAe,MAAM;AACjB,eAAO,MAAM,gBAAgB;AAAA,MACjC;AAAA,MACA,eAAe,MAAM;AACjB,eAAO,MAAM,gBAAgB;AAAA,MACjC;AAAA,MACA,0BAA0B,MAAM;AAC5B,eAAO,MAAM;AAAA,MACjB;AAAA,IACJ;AAAA,EACJ;AACA,SAAO;AACX;",
  "names": []
}
