{
  "version": 3,
  "sources": ["../../src/lib/interval.ts"],
  "sourcesContent": ["import { generateValues } from './generate-values';\nimport { secToHourMinSec } from './global';\nimport { resetValues } from './reset';\nimport type { Timer, TimerSelector } from '../types/types';\nimport { timerObject } from '../config/timer-data';\nimport { useStore } from '../store/store';\nimport { errorLogger } from './logging';\n\nexport const interval = (\n    sec: number,\n    timerBlock: TimerSelector,\n    inputString: string,\n    name: string,\n    timer: Timer,\n    int: number,\n    onlyOneTimer: boolean,\n): void => {\n    const store = useStore();\n    const _this = store._this;\n\n    generateValues(timer, sec, timerBlock, inputString, name);\n\n    const { string } = secToHourMinSec(sec, false);\n    timer.lengthTimer = string;\n\n    if (!timerBlock) {\n        return;\n    }\n\n    timerObject.interval[timerBlock as keyof typeof timerObject.interval] = _this.setInterval(() => {\n        const timeLeftSec = generateValues(timer, sec, timerBlock, inputString, name);\n\n        if (timeLeftSec <= 60 && onlyOneTimer == false) {\n            onlyOneTimer = true;\n\n            if (timerObject.interval) {\n                _this.clearInterval(\n                    timerObject.interval[timerBlock as keyof typeof timerObject.interval] as ioBroker.Interval,\n                );\n            }\n\n            interval(sec, timerBlock, inputString, name, timer, timerObject.timer[timerBlock].timerInterval, true);\n        }\n\n        if (timeLeftSec <= 0 || !timerObject.timerActive.timer[timerBlock]) {\n            timerObject.timerActive.timerCount--;\n\n            resetValues(timer, timerBlock).catch((e: any) => {\n                errorLogger('Error in interval', e, _this);\n            });\n\n            _this.log.debug('Timer stopped');\n\n            if (timerObject.interval) {\n                _this.clearInterval(\n                    timerObject.interval[timerBlock as keyof typeof timerObject.interval] as ioBroker.Interval,\n                );\n\n                timerObject.interval[timerBlock as keyof typeof timerObject.interval] = null;\n            }\n        }\n    }, int);\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAA+B;AAC/B,oBAAgC;AAChC,mBAA4B;AAE5B,wBAA4B;AAC5B,mBAAyB;AACzB,qBAA4B;AAErB,MAAM,WAAW,CACpB,KACA,YACA,aACA,MACA,OACA,KACA,iBACO;AACP,QAAM,YAAQ,uBAAS;AACvB,QAAM,QAAQ,MAAM;AAEpB,6CAAe,OAAO,KAAK,YAAY,aAAa,IAAI;AAExD,QAAM,EAAE,OAAO,QAAI,+BAAgB,KAAK,KAAK;AAC7C,QAAM,cAAc;AAEpB,MAAI,CAAC,YAAY;AACb;AAAA,EACJ;AAEA,gCAAY,SAAS,UAA+C,IAAI,MAAM,YAAY,MAAM;AAC5F,UAAM,kBAAc,uCAAe,OAAO,KAAK,YAAY,aAAa,IAAI;AAE5E,QAAI,eAAe,MAAM,gBAAgB,OAAO;AAC5C,qBAAe;AAEf,UAAI,8BAAY,UAAU;AACtB,cAAM;AAAA,UACF,8BAAY,SAAS,UAA+C;AAAA,QACxE;AAAA,MACJ;AAEA,eAAS,KAAK,YAAY,aAAa,MAAM,OAAO,8BAAY,MAAM,UAAU,EAAE,eAAe,IAAI;AAAA,IACzG;AAEA,QAAI,eAAe,KAAK,CAAC,8BAAY,YAAY,MAAM,UAAU,GAAG;AAChE,oCAAY,YAAY;AAExB,oCAAY,OAAO,UAAU,EAAE,MAAM,CAAC,MAAW;AAC7C,wCAAY,qBAAqB,GAAG,KAAK;AAAA,MAC7C,CAAC;AAED,YAAM,IAAI,MAAM,eAAe;AAE/B,UAAI,8BAAY,UAAU;AACtB,cAAM;AAAA,UACF,8BAAY,SAAS,UAA+C;AAAA,QACxE;AAEA,sCAAY,SAAS,UAA+C,IAAI;AAAA,MAC5E;AAAA,IACJ;AAAA,EACJ,GAAG,GAAG;AACV;",
  "names": []
}
