{
  "version": 3,
  "sources": ["../../src/lib/timer-name.ts"],
  "sourcesContent": ["import { useStore } from '../store/store';\nimport type { AlexaActiveTimerList, Timers, TimerSelector } from '../types/types';\nimport { isIobrokerValue } from './global';\nimport { timerObject } from '../config/timer-data';\nimport { errorLogger } from './logging';\n\nexport const getNewTimerName = (jsonString: ioBroker.State, timerSelector: string): void => {\n    const { _this } = useStore();\n\n    let json: AlexaActiveTimerList[] = [];\n    try {\n        if (isIobrokerValue(jsonString)) {\n            json = JSON.parse(jsonString.val as string);\n        }\n\n        if (json.length === 1) {\n            saveLabelAndId(json[0], timerSelector);\n            return;\n        }\n\n        const timerWithUniqueId = getTimerWithUniqueId(json);\n        if (timerWithUniqueId) {\n            saveLabelAndId(timerWithUniqueId, timerSelector);\n        }\n    } catch (e: any) {\n        errorLogger('Error in getNewTimerName', e, _this);\n    }\n};\n\nexport const registerIdToGetTimerName = async (timerSelector: TimerSelector): Promise<void> => {\n    const store = useStore();\n    const _this = store._this;\n    try {\n        const serial = store.deviceSerialNumber;\n        if (!serial) {\n            return;\n        }\n        const foreignId = `alexa2.${store.getAlexaInstanceObject().instance}.Echo-Devices.${serial}.Timer.activeTimerList`;\n        store.lastTimer = { timerSerial: serial, timerSelector: timerSelector as string, id: foreignId };\n\n        await _this.subscribeForeignStatesAsync(foreignId);\n        _this.log.debug(`Subscribed to ${foreignId}`);\n    } catch (e: any) {\n        errorLogger('Error in registerIdToGetTimerName', e, _this);\n    }\n};\n\nfunction getTimerWithUniqueId(json: AlexaActiveTimerList[]): AlexaActiveTimerList | null {\n    let timerWithUniqueId: AlexaActiveTimerList | null = null;\n    for (let i = 0; i < json.length; i++) {\n        if (timerWithUniqueId) {\n            break;\n        }\n        for (const timer in timerObject.timer) {\n            if (timerObject.timer[timer as keyof Timers].id === json[i].id) {\n                timerWithUniqueId = null;\n                break;\n            }\n            timerWithUniqueId = { id: json[i].id, label: json[i].label || '', triggerTime: json[i].triggerTime };\n        }\n    }\n    return timerWithUniqueId;\n}\n\nfunction saveLabelAndId({ id, label }: AlexaActiveTimerList, timerSelector: string): void {\n    timerObject.timer[timerSelector as keyof typeof timerObject.timer].alexaTimerName = label || '';\n    timerObject.timer[timerSelector as keyof typeof timerObject.timer].id = id || '';\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAyB;AAEzB,oBAAgC;AAChC,wBAA4B;AAC5B,qBAA4B;AAErB,MAAM,kBAAkB,CAAC,YAA4B,kBAAgC;AACxF,QAAM,EAAE,MAAM,QAAI,uBAAS;AAE3B,MAAI,OAA+B,CAAC;AACpC,MAAI;AACA,YAAI,+BAAgB,UAAU,GAAG;AAC7B,aAAO,KAAK,MAAM,WAAW,GAAa;AAAA,IAC9C;AAEA,QAAI,KAAK,WAAW,GAAG;AACnB,qBAAe,KAAK,CAAC,GAAG,aAAa;AACrC;AAAA,IACJ;AAEA,UAAM,oBAAoB,qBAAqB,IAAI;AACnD,QAAI,mBAAmB;AACnB,qBAAe,mBAAmB,aAAa;AAAA,IACnD;AAAA,EACJ,SAAS,GAAQ;AACb,oCAAY,4BAA4B,GAAG,KAAK;AAAA,EACpD;AACJ;AAEO,MAAM,2BAA2B,OAAO,kBAAgD;AAC3F,QAAM,YAAQ,uBAAS;AACvB,QAAM,QAAQ,MAAM;AACpB,MAAI;AACA,UAAM,SAAS,MAAM;AACrB,QAAI,CAAC,QAAQ;AACT;AAAA,IACJ;AACA,UAAM,YAAY,UAAU,MAAM,uBAAuB,EAAE,QAAQ,iBAAiB,MAAM;AAC1F,UAAM,YAAY,EAAE,aAAa,QAAQ,eAAwC,IAAI,UAAU;AAE/F,UAAM,MAAM,4BAA4B,SAAS;AACjD,UAAM,IAAI,MAAM,iBAAiB,SAAS,EAAE;AAAA,EAChD,SAAS,GAAQ;AACb,oCAAY,qCAAqC,GAAG,KAAK;AAAA,EAC7D;AACJ;AAEA,SAAS,qBAAqB,MAA2D;AACrF,MAAI,oBAAiD;AACrD,WAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,KAAK;AAClC,QAAI,mBAAmB;AACnB;AAAA,IACJ;AACA,eAAW,SAAS,8BAAY,OAAO;AACnC,UAAI,8BAAY,MAAM,KAAqB,EAAE,OAAO,KAAK,CAAC,EAAE,IAAI;AAC5D,4BAAoB;AACpB;AAAA,MACJ;AACA,0BAAoB,EAAE,IAAI,KAAK,CAAC,EAAE,IAAI,OAAO,KAAK,CAAC,EAAE,SAAS,IAAI,aAAa,KAAK,CAAC,EAAE,YAAY;AAAA,IACvG;AAAA,EACJ;AACA,SAAO;AACX;AAEA,SAAS,eAAe,EAAE,IAAI,MAAM,GAAyB,eAA6B;AACtF,gCAAY,MAAM,aAA+C,EAAE,iBAAiB,SAAS;AAC7F,gCAAY,MAAM,aAA+C,EAAE,KAAK,MAAM;AAClF;",
  "names": []
}
