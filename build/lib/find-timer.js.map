{
  "version": 3,
  "sources": ["../../src/lib/find-timer.ts"],
  "sourcesContent": ["import { useStore } from '../store/store';\nimport { timerObject } from '../config/timer-data';\nimport { isIobrokerValue, isString } from './global';\nimport { errorLogger } from './logging';\nimport type { OneOfMultiTimer, TimerName } from '../types/types';\n\nexport const findTimer = async (\n    sec: number,\n    name: string,\n    deleteTimerIndex: number,\n    value: string,\n): Promise<{ oneOfMultiTimer: OneOfMultiTimer; timer: TimerName[] }> => {\n    const store = useStore();\n    const _this = store._this;\n    try {\n        name = name.trim();\n        let inputDevice = '';\n\n        const obj = await _this.getForeignStateAsync(`alexa2.${store.getAlexaInstanceObject().instance}.History.name`);\n\n        if (isIobrokerValue(obj) && isString(obj.val)) {\n            inputDevice = obj.val;\n        }\n\n        const { countMatchingName, countMatchingTime, countMatchingInputDevice } = getMatchingTimerCounts(\n            inputDevice,\n            sec,\n            name,\n        );\n\n        const timerFound: {\n            oneOfMultiTimer: OneOfMultiTimer;\n            timer: TimerName[];\n        } = { oneOfMultiTimer: {} as OneOfMultiTimer, timer: [] };\n\n        if (store.questionAlexa) {\n            if (countMatchingName == 1) {\n                timerFound.oneOfMultiTimer = { value: '', sec: 0, name, inputDevice };\n            } else if (countMatchingTime > 1) {\n                // Einer, mit genauer Zeit, mehrmals vorhanden\n                timerFound.oneOfMultiTimer = { value, sec, name: '', inputDevice: '' };\n            } else if (countMatchingInputDevice != timerObject.timerActive.timerCount) {\n                // Einer, mit genauer Zeit, mehrmals auf verschiedenen Ger\u00E4ten\n\n                timerFound.oneOfMultiTimer = { value, sec, name: '', inputDevice: '' };\n            } else {\n                timerFound.oneOfMultiTimer = { value, sec: 0, name: '', inputDevice: '' };\n            }\n        }\n\n        for (const element in timerObject.timer) {\n            const timerName = element as TimerName;\n            // Soll einer oder mehrere Timer gel\u00F6scht werden?\n            if (deleteTimerIndex == 1) {\n                // Einer, mit genauer Zeit, nur einmal vorhanden\n                // Einer, und einer ist auch nur gestellt\n                if (!store.questionAlexa) {\n                    if (timerObject.timerActive.timerCount == 1 && timerObject.timerActive.timer[timerName]) {\n                        timerFound.timer.push(timerName);\n                        // _this.log.debug(\"Einer, wenn genau einer gestellt ist\");\n                    } else if (\n                        countMatchingTime == 1 &&\n                        timerObject.timer[timerName].voiceInputAsSeconds == sec &&\n                        sec !== 0\n                    ) {\n                        timerFound.timer.push(timerName);\n                    } else if (\n                        // _this.log.debug(\"Wenn nur einer gestellt ist mit der der gew\u00FCnschten Zeit\");\n                        countMatchingTime == 1 &&\n                        timerObject.timer[timerName].voiceInputAsSeconds == sec\n                    ) {\n                        timerFound.timer.push(timerName);\n                        // _this.log.debug(\"Einer ist gestellt mit genau diesem Wert\");\n                    } else if (\n                        // Einer, mit genauem Namen\n                        timerObject.timer[timerName].name == name &&\n                        name !== '' &&\n                        countMatchingName == 1\n                    ) {\n                        timerFound.timer.push(timerName);\n\n                        // _this.log.debug(\"Mit genauem Namen\");\n                    } // Entweder alle auf diesem Ger\u00E4t, oder keins auf diesem Ger\u00E4t\n                    // }\n                }\n            } else if (deleteTimerIndex == 2) {\n                // Alle, alle sind auf einem Ger\u00E4t\n                if (!store.questionAlexa) {\n                    timerFound.timer.push(timerName);\n                    // }\n                } else {\n                    // Alle, nur die vom eingabe Ger\u00E4t\n                    if (countMatchingInputDevice != timerObject.timerActive.timerCount && value.indexOf('nein') != -1) {\n                        if (timerObject.timer[timerName].inputDevice == inputDevice) {\n                            timerFound.timer.push(timerName);\n                            // _this.log.debug(\"Only this device\");\n                        }\n                    } else if (\n                        // Alle, von allen Ger\u00E4ten\n                        countMatchingInputDevice != timerObject.timerActive.timerCount &&\n                        value.indexOf('ja') != -1\n                    ) {\n                        for (const element in timerObject.timerActive.timer) {\n                            timerFound.timer.push(element as TimerName);\n                            _this.log.debug('Clear all');\n                        }\n                    }\n                }\n            }\n        }\n        return timerFound;\n    } catch (e) {\n        errorLogger('Error in findTimer', e, _this);\n        return { oneOfMultiTimer: {} as OneOfMultiTimer, timer: [] };\n    }\n};\n\nfunction findTimerWithExactSameInputDevice(\n    element: TimerName,\n    inputDevice: string,\n    countMatchingInputDevice: number,\n): number {\n    if (timerObject.timer[element].inputDevice == inputDevice) {\n        countMatchingInputDevice++;\n    }\n    return countMatchingInputDevice;\n}\n\nfunction findTimerWithExactSameName(element: TimerName, countMatchingName: number, name: string): number {\n    if (timerObject.timer[element].name.trim() == name) {\n        countMatchingName++;\n    }\n    return countMatchingName;\n}\n\nfunction findTimerWithExactSameSec(element: TimerName, countMatchingTime: number, sec: number): number {\n    if (timerObject.timer[element].voiceInputAsSeconds == sec) {\n        countMatchingTime++;\n    }\n    return countMatchingTime;\n}\n\nfunction getMatchingTimerCounts(\n    inputDevice: string,\n    sec: number,\n    name: string,\n): { countMatchingName: number; countMatchingTime: number; countMatchingInputDevice: number } {\n    let countMatchingTime = 0;\n    let countMatchingName = 0;\n    let countMatchingInputDevice = 0;\n\n    for (const el in timerObject.timer) {\n        const element = el as TimerName;\n        countMatchingTime = findTimerWithExactSameSec(element, countMatchingTime, sec);\n        countMatchingName = findTimerWithExactSameName(element, countMatchingName, name);\n        countMatchingInputDevice = findTimerWithExactSameInputDevice(element, inputDevice, countMatchingInputDevice);\n    }\n    return { countMatchingName, countMatchingTime, countMatchingInputDevice };\n}\n"],
  "mappings": "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",
  "names": ["element"]
}
