{
  "version": 3,
  "sources": ["../../src/types/types.ts"],
  "sourcesContent": ["import type AlexaTimerVis from '../main';\n\nexport interface GenerateTimeStringObject {\n    timeString: string;\n    hour: string;\n    minutes: string;\n    seconds: string;\n    store: Store;\n}\n\nexport interface AlexaActiveTimerList {\n    id: string;\n    label: string | null;\n    triggerTime: number;\n}\n\nexport type TimerSelector = keyof Timers | undefined;\n\nexport type TimerCondition =\n    | 'ShortenNotificationIntent'\n    | 'ExtendNotificationIntent'\n    | 'RemoveNotificationIntent'\n    | 'SetNotificationIntent';\n\nexport interface Timer {\n    hour: string;\n    minute: string;\n    second: string;\n    stringTimer: string;\n    stringTimer2: string;\n    voiceInputAsSeconds: number;\n    index: TimerSelector;\n    name: string;\n    alexaTimerName: string | null;\n    startTimeNumber: number;\n    startTimeString: string;\n    endTimeNumber: number;\n    endTimeString: string;\n    inputDevice: string;\n    inputString: string;\n    serialNumber: string;\n    timerInterval: number;\n    lengthTimer: string;\n    percent: number;\n    percent2: number;\n    extendOrShortenTimer: boolean;\n    remainingTimeInSeconds: number;\n    id: string;\n}\n\nexport type TimerName = 'timer1' | 'timer2' | 'timer3' | 'timer4';\n\nexport type Timers = Record<TimerName, Timer>;\n\nexport interface TimerObject {\n    timerActive: {\n        timerCount: number;\n        data: {\n            interval: number;\n            notNoted: string[];\n            notNotedSentence: string[];\n            stopAll: string[];\n            connector: string[];\n            hour: string[];\n            minute: string[];\n            second: string[];\n            abortWords: string[];\n        };\n        timer: Record<keyof Timers, boolean>;\n    };\n    timer: Timers;\n    brueche1: {\n        halbe: number;\n        halb: string;\n    };\n    brueche2: {\n        viertelstunde: number;\n        dreiviertelstunde: number;\n    };\n    zahlen: {\n        eins: number;\n        ein: number;\n        one: number;\n        eine: number;\n        zwei: number;\n        zwo: number;\n        two: number;\n        drei: number;\n        three: number;\n        vier: number;\n        four: number;\n        f\u00FCnf: number;\n        five: number;\n        sechs: number;\n        six: number;\n        sieben: number;\n        seven: number;\n        acht: number;\n        eight: number;\n        neun: number;\n        nine: number;\n        zehn: number;\n        ten: number;\n        elf: number;\n        eleven: number;\n        zw\u00F6lf: number;\n        twelve: number;\n        dreizehn: number;\n        thirteen: number;\n        vierzehn: number;\n        fourteen: number;\n        f\u00FCnfzehn: number;\n        fifteen: number;\n        sechzehn: number;\n        sixteen: number;\n        siebzehn: number;\n        seventeen: number;\n        achtzehn: number;\n        eighteen: number;\n        neunzehn: number;\n        nineteen: number;\n        zwanzig: number;\n        twenty: number;\n        drei\u00DFig: number;\n        thirty: number;\n        vierzig: number;\n        fourty: number;\n        f\u00FCnfzig: number;\n        fifty: number;\n        sechzig: number;\n        sixty: number;\n        siebzig: number;\n        seventy: number;\n        achtzig: number;\n        eighty: number;\n        neunzig: number;\n        ninety: number;\n        hundert: number;\n        hundred: number;\n    };\n    ziffern: string[];\n    zuweisung: {\n        erster: number;\n        eins: number;\n        zweiter: number;\n        zwei: number;\n        dritter: number;\n        drei: number;\n        vierter: number;\n        vier: number;\n        f\u00FCnfter: number;\n        f\u00FCnf: number;\n    };\n    interval: {\n        timer1?: ioBroker.Interval;\n    };\n}\n\nexport interface Store {\n    _this: AlexaTimerVis;\n    token: string | null;\n    valHourForZero: string;\n    valMinuteForZero: string;\n    valSecondForZero: string;\n    pathAlexaStateToListenTo: string;\n    pathAlexaSummary: string;\n    intervalMore60: number;\n    intervalLess60: number;\n    debounceTime: number;\n    unitHour1: string;\n    unitHour2: string;\n    unitHour3: string;\n    unitMinute1: string;\n    unitMinute2: string;\n    unitMinute3: string;\n    unitSecond1: string;\n    unitSecond2: string;\n    unitSecond3: string;\n    timerAction: TimerCondition | null;\n    questionAlexa: boolean;\n    interval?: ioBroker.Interval;\n    deviceSerialNumber: string | null;\n    deviceName: string | null;\n    lastTimer: LastTimer;\n    oldAlexaTimerObject: AlexaActiveTimerList[];\n    alexaTimerVisInstance: string;\n    getAlexaInstanceObject: () => AlexaInstanceObject;\n    isAddTimer: () => boolean;\n    isShortenTimer: () => boolean;\n    isExtendTimer: () => boolean;\n    isDeleteTimer: () => boolean;\n    getAlexaTimerVisInstance: () => string;\n}\n\ninterface AlexaInstanceObject {\n    adapter: string;\n    instance: string;\n    channel_history: string;\n}\n\ninterface LastTimer {\n    timerSelector: string;\n    timerSerial: string;\n    id: string;\n}\n\nexport interface OneOfMultiTimer {\n    value: string;\n    sec: number;\n    name: string;\n    inputDevice: string;\n}\n"],
  "mappings": ";;;;;;;;;;;;;;AAAA;AAAA;",
  "names": []
}
